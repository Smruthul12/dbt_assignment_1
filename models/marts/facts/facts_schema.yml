models:
  - name: customer_rfm
    description: The 'customer_rfm' model is designed to calculate the Recency, Frequency, and Monetary (RFM) scores for each customer. The model first creates a base table 'rfm_base' that aggregates the latest purchase date, the count of distinct invoices, and the total monetary value for each customer. Then, it calculates the recency (the number of days since the last purchase), frequency (the number of purchases), and monetary value for each customer. The model also assigns a score from 1 to 5 for each RFM value, with 1 being the lowest and 5 being the highest. Finally, it calculates the total RFM score by adding up the individual RFM scores.
    columns:
      - name: customerid
        description: This column represents the unique identifier for each customer in the retail database. It is a VARCHAR type and is used to distinguish individual customers.
        data_type: varchar
        tests:
          - not_null
          - unique

      - name: recency
        description: The 'RECENCY' column represents the number of days between the customer's last purchase date and the current date. It is calculated using the DATEDIFF function in SQL, which subtracts the last purchase date from the current date. This column is used to determine how recently a customer has made a purchase, with a lower value indicating a more recent purchase.
        data_type: number
        tests:
          - not_null
          - positive_values

      - name: frequency
        description: This column represents the number of distinct purchases made by a customer. It is calculated by counting the distinct InvoiceNo for each CustomerID in the retail_cleansed table of the Retail_Analytics_dbt.DEV database.
        data_type: number
        tests:
          - not_null
          - positive_values

      - name: monetary_value
        description: This column represents the total monetary value of all purchases made by a customer. It is calculated by summing the product of quantity and unit price for each purchase made by the customer.
        data_type: float
        tests:
          - not_null
          - positive_values

      - name: recency_score
        description: The RECENCY_SCORE column represents the score assigned to the recency of a customer's last purchase. It is calculated using the NTILE window function, which divides the recency of all customers into 5 groups. The score is assigned in descending order, meaning that a customer with a more recent purchase will have a higher score.
        data_type: number
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 5

      - name: frequency_score
        description: The FREQUENCY_SCORE column represents the score assigned to the frequency of purchases made by a customer. It is calculated using the NTILE function, which divides the frequency of purchases into 5 groups. The score is assigned in ascending order, meaning customers with lower purchase frequencies receive lower scores.
        data_type: number
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 5

      - name: monetary_score
        description: The MONETARY_SCORE column represents the quintile ranking of a customer's total monetary value. It is calculated using the NTILE window function, which divides the ordered dataset into five equal parts. A higher score indicates a lower monetary value.
        data_type: number
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 5

      - name: rfm_total_score
        description: The RFM_TOTAL_SCORE column is a numerical value that represents the sum of the recency_score, frequency_score, and monetary_score for each customer. This score is used to evaluate and segment customers based on their purchasing behavior. A higher RFM_TOTAL_SCORE indicates a more valuable customer.
        data_type: number
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 3
              max_value: 15

  - name: facts_sales
    description: The 'facts_sales' model is a transformation of the 'retail_cleansed' table from the 'Retail_Analytics_dbt.DEV' database. It includes the columns 'InvoiceNo', 'InvoiceDate', 'CustomerID', 'StockCode', 'Quantity', 'UnitPrice', and a calculated column 'total_amount' which is the product of 'Quantity' and 'UnitPrice'. This model provides a detailed view of each sale transaction.
    columns:
      - name: invoiceno
        description: This column represents the unique identifier for each invoice in the sales data. It is of varchar data type.
        data_type: varchar
        tests:
          - not_null
          - unique

      - name: invoicedate
        description: The date when the invoice was created. It is of date data type.
        data_type: date
        tests:
          - not_null

      - name: customerid
        description: The unique identifier for each customer.
        data_type: varchar
        tests:
          - not_null

      - name: stockcode
        description: The unique identifier for each product in the retail store.
        data_type: varchar
        tests:
          - not_null

      - name: quantity
        description: The QUANTITY column represents the number of units of a particular product that were sold in a single transaction. This is a numeric field.
        data_type: number
        tests:
          - not_null
          - positive_values

      - name: unitprice
        description: The price of a single unit of the product sold, represented as a floating point number.
        data_type: float
        tests:
          - not_null
          - positive_values

      - name: total_amount
        description: The total amount is calculated by multiplying the quantity of the product sold with the unit price. It represents the total revenue generated from the sale of a particular product in a single transaction.
        data_type: float
        tests:
          - not_null

  - name: sales_performance
    description: The 'sales_performance' model provides a monthly summary of total sales and total orders. The 'total_sales' column is calculated as the sum of the product of 'Quantity' and 'UnitPrice' for each invoice in a given month. The 'total_orders' column is calculated as the count of distinct 'InvoiceNo' in a given month. The data is sorted in descending order by 'month'. The source of this data is the 'retail_cleansed' table in the 'Retail_Analytics_dbt.DEV' schema.
    columns:
      - name: month
        description: This column represents the month in which the sales were made. The data type is date and it is derived from the 'InvoiceDate' column of the 'retail_cleansed' table in the 'Retail_Analytics_dbt.DEV' database. The month is extracted using the DATE_TRUNC function in SQL.
        data_type: date
        tests:
          - not_null
          - unique

      - name: total_sales
        description: This column represents the total sales for each month. It is calculated by multiplying the quantity of each item sold with its unit price, and then summing up these values for all items sold within the month.
        data_type: float
        tests:
          - not_null
          - positive_values         

      - name: total_orders
        description: This column represents the total number of unique orders made in a given month. It is calculated by counting the distinct InvoiceNo from the retail_cleansed table in the Retail_Analytics_dbt.DEV schema.
        data_type: number
        tests:
          - not_null
          - positive_values
